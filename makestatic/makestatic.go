/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Command makeStatic reads a set of files and writes a Go source file to "static.go"
// that declares a map of string constants containing contents of the input files.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"unicode/utf8"
)

const filePerm = 0o600

func main() {
	if err := makeStatic(); err != nil {
		log.Fatal(err)
	}
}

func makeStatic() error {
	f, err := os.Create("webapi/static.go")
	if err != nil {
		return err
	}
	defer f.Close()

	buf := new(bytes.Buffer)
	_, _ = fmt.Fprintf(buf, "\n\n%v\n\npackage webapi\n\n", warning)

	if fileErr := addFile(buf, "indexHTMLContent", "webapi/index.html"); fileErr != nil {
		return fileErr
	}

	if fileErr := addFile(buf, "manageHTMLContent", "webapi/manage.html"); fileErr != nil {
		return fileErr
	}

	fmtBuf, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	return os.WriteFile("webapi/static.go", fmtBuf, filePerm)
}

func addFile(buf io.Writer, variable, fn string) error {
	_, _ = fmt.Fprintf(buf, "var "+variable+"=[]byte(")

	fileData, ioErr := os.ReadFile(fn)
	if ioErr != nil {
		return ioErr
	}

	if utf8.Valid(fileData) {
		_, _ = fmt.Fprintf(buf, "`%s`", sanitize(fileData))
	} else {
		_, _ = fmt.Fprintf(buf, "%q", fileData)
	}

	_, _ = fmt.Fprintf(buf, ")\n\n")

	return nil
}

// sanitize prepares a valid UTF-8 string as a raw string constant.
func sanitize(data []byte) []byte {
	// Replace ` with `+"`"+`
	data = bytes.Replace(data, []byte("`"), []byte("`+\"`\"+`"), -1)

	// Replace BOM with `+"\xEF\xBB\xBF"+`
	// (A BOM is valid UTF-8 but not permitted in Go source files.
	// I wouldn't bother handling this, but for some insane reason
	// jquery.js has a BOM somewhere in the middle.)
	return bytes.Replace(data, []byte("\xEF\xBB\xBF"), []byte("`+\"\\xEF\\xBB\\xBF\"+`"), -1)
}

const warning = `// Code generated by "makeStatic"; DO NOT EDIT.`
